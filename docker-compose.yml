services:
  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: hospital-backend
    ports:
      - "5002:5002"
    environment:
      - NODE_ENV=production
      - PORT=5002
      - DATABASE_URL=postgresql://hospital_user:hospital_password@postgres:5432/hospital_analytics
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5002/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Keycloak Authentication Service
  keycloak:
    image: quay.io/keycloak/keycloak:26.2.5
    container_name: hospital-keycloak
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    command: start-dev --import-realm
    volumes:
      - ./demo-realm.json:/opt/keycloak/data/import/demo-realm.json
    restart: unless-stopped

  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: hospital-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=hospital_analytics
      - POSTGRES_USER=hospital_user
      - POSTGRES_PASSWORD=hospital_password
    volumes:
      - hospital_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Frontend React Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5002
        - REACT_APP_ADMIN_API_URL=http://localhost:5002
        - REACT_APP_KEYCLOAK_URL=http://localhost:8080
        - REACT_APP_KEYCLOAK_REALM=demo
        - REACT_APP_KEYCLOAK_CLIENT_ID=demo-client
    container_name: hospital-frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - keycloak
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  default:
    name: hospital-network
    driver: bridge

volumes:
  hospital_data:
    driver: local