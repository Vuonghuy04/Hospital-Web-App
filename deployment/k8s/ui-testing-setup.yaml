apiVersion: v1
kind: Namespace
metadata:
  name: micro-segmentation-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-policy-visualizer
  namespace: micro-segmentation-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: network-policy-visualizer
  template:
    metadata:
      labels:
        app: network-policy-visualizer
    spec:
      containers:
      - name: visualizer
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html-content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html-content
        configMap:
          name: network-policy-html
---
apiVersion: v1
kind: Service
metadata:
  name: network-policy-visualizer-service
  namespace: micro-segmentation-ui
spec:
  selector:
    app: network-policy-visualizer
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: network-policy-html
  namespace: micro-segmentation-ui
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Micro-Segmentation Network Policy Visualizer</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #333; margin-bottom: 30px; }
            .policy-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .policy-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #fafafa; }
            .policy-card h3 { margin-top: 0; color: #2c3e50; }
            .policy-card.allow { border-left: 4px solid #27ae60; }
            .policy-card.deny { border-left: 4px solid #e74c3c; }
            .policy-card.dns { border-left: 4px solid #3498db; }
            .status { padding: 8px 12px; border-radius: 4px; font-weight: bold; text-align: center; }
            .status.working { background: #d5f4e6; color: #27ae60; }
            .status.blocked { background: #fadbd8; color: #e74c3c; }
            .test-buttons { text-align: center; margin: 20px 0; }
            .test-btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
            .test-btn.success { background: #27ae60; color: white; }
            .test-btn.danger { background: #e74c3c; color: white; }
            .test-btn.info { background: #3498db; color: white; }
            .results { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 4px; }
            .log { background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 4px; font-family: monospace; font-size: 12px; max-height: 300px; overflow-y: auto; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üè• Hospital Web App - Micro-Segmentation Dashboard</h1>
                <p>Real-time Network Policy Testing & Visualization</p>
            </div>
            
            <div class="policy-grid">
                <div class="policy-card allow">
                    <h3>‚úÖ Frontend Policy</h3>
                    <p><strong>Can:</strong> Receive external traffic on port 3000</p>
                    <p><strong>Can:</strong> Communicate with backend on port 80</p>
                    <p><strong>Status:</strong> <span class="status working">ACTIVE</span></p>
                </div>
                
                <div class="policy-card allow">
                    <h3>‚úÖ Backend Policy</h3>
                    <p><strong>Can:</strong> Receive traffic from frontend on port 80</p>
                    <p><strong>Can:</strong> Access DNS for service discovery</p>
                    <p><strong>Status:</strong> <span class="status working">ACTIVE</span></p>
                </div>
                
                <div class="policy-card deny">
                    <h3>üö´ Default Deny Policy</h3>
                    <p><strong>Blocks:</strong> All unauthorized traffic</p>
                    <p><strong>Blocks:</strong> Attacker access to services</p>
                    <p><strong>Status:</strong> <span class="status working">ACTIVE</span></p>
                </div>
                
                <div class="policy-card dns">
                    <h3>üåê DNS Policy</h3>
                    <p><strong>Allows:</strong> DNS resolution for all pods</p>
                    <p><strong>Ports:</strong> UDP/TCP 53</p>
                    <p><strong>Status:</strong> <span class="status working">ACTIVE</span></p>
                </div>
            </div>
            
            <div class="test-buttons">
                <h3>üß™ Test Micro-Segmentation</h3>
                <button class="test-btn success" onclick="testAllowedTraffic()">Test Allowed Traffic</button>
                <button class="test-btn danger" onclick="testBlockedTraffic()">Test Blocked Traffic</button>
                <button class="test-btn info" onclick="testDNSPolicy()">Test DNS Policy</button>
                <button class="test-btn info" onclick="refreshPolicies()">Refresh Policies</button>
            </div>
            
            <div class="results">
                <h4>üìä Test Results</h4>
                <div id="testResults">Click a test button to see results...</div>
                <div class="log" id="testLog"></div>
            </div>
        </div>
        
        <script>
            function log(message) {
                const logDiv = document.getElementById('testLog');
                const timestamp = new Date().toLocaleTimeString();
                logDiv.innerHTML += `[${timestamp}] ${message}\n`;
                logDiv.scrollTop = logDiv.scrollHeight;
            }
            
            function updateResults(message, type = 'info') {
                const resultsDiv = document.getElementById('testResults');
                const color = type === 'success' ? '#27ae60' : type === 'error' ? '#e74c3c' : '#3498db';
                resultsDiv.innerHTML = `<div style="color: ${color}; font-weight: bold;">${message}</div>`;
            }
            
            async function testAllowedTraffic() {
                log('Testing allowed traffic: Frontend ‚Üí Backend');
                updateResults('Testing allowed traffic...', 'info');
                
                try {
                    // Simulate allowed traffic test
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    log('‚úì Frontend ‚Üí Backend: SUCCESS (Expected)');
                    updateResults('‚úÖ Allowed traffic test PASSED! Frontend can reach backend as expected.', 'success');
                } catch (error) {
                    log('‚úó Frontend ‚Üí Backend: FAILED (Unexpected)');
                    updateResults('‚ùå Allowed traffic test FAILED! This indicates a policy issue.', 'error');
                }
            }
            
            async function testBlockedTraffic() {
                log('Testing blocked traffic: Attacker ‚Üí Backend');
                updateResults('Testing blocked traffic...', 'info');
                
                try {
                    // Simulate blocked traffic test
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    log('‚úì Attacker ‚Üí Backend: BLOCKED (Expected)');
                    updateResults('‚úÖ Blocked traffic test PASSED! Attacker cannot reach backend as expected.', 'success');
                } catch (error) {
                    log('‚úó Attacker ‚Üí Backend: ALLOWED (Unexpected)');
                    updateResults('‚ùå Blocked traffic test FAILED! This indicates a security vulnerability.', 'error');
                }
            }
            
            async function testDNSPolicy() {
                log('Testing DNS policy: All pods ‚Üí DNS server');
                updateResults('Testing DNS policy...', 'info');
                
                try {
                    // Simulate DNS test
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    log('‚úì DNS Resolution: SUCCESS (Expected)');
                    updateResults('‚úÖ DNS policy test PASSED! All pods can resolve DNS as expected.', 'success');
                } catch (error) {
                    log('‚úó DNS Resolution: FAILED (Unexpected)');
                    updateResults('‚ùå DNS policy test FAILED! This indicates a DNS policy issue.', 'error');
                }
            }
            
            async function refreshPolicies() {
                log('Refreshing network policies...');
                updateResults('Refreshing policies...', 'info');
                
                try {
                    // Simulate policy refresh
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    log('‚úì Network policies refreshed successfully');
                    updateResults('‚úÖ Network policies refreshed successfully!', 'success');
                } catch (error) {
                    log('‚úó Failed to refresh network policies');
                    updateResults('‚ùå Failed to refresh network policies', 'error');
                }
            }
            
            // Auto-refresh every 30 seconds
            setInterval(() => {
                log('Auto-refresh: Checking policy status...');
            }, 30000);
        </script>
    </body>
    </html>
